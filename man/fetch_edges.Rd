% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_edges.R, R/fetch_edges.file_engine.R,
%   R/fetch_edges.neo4j_engine.R, R/fetch_edges.tbl_kgx.R
\name{fetch_edges}
\alias{fetch_edges}
\alias{fetch_edges.file_engine}
\alias{fetch_edges.neo4j_engine}
\alias{fetch_edges.tbl_kgx}
\title{Fetch additional knowledge graph edges connected to a query graph}
\usage{
fetch_edges(obj, ...)

\method{fetch_edges}{file_engine}(
  engine,
  g,
  direction = "both",
  predicates = NULL,
  result_categories = NULL,
  transitive = FALSE,
  drop_unused_query_nodes = FALSE
)

\method{fetch_edges}{neo4j_engine}(
  engine,
  g,
  direction = "both",
  predicates = NULL,
  result_categories = NULL,
  transitive = FALSE,
  drop_unused_query_nodes = FALSE
)

\method{fetch_edges}{tbl_kgx}(g, ...)
}
\arguments{
\item{engine}{(Optional) An engine to use for fetching query graph edges.}

\item{g}{A query \code{tbl_kgx()} graph.}

\item{direction}{The direction of associations to fetch. Can be "in", "out", or "both". Default is "both".}

\item{predicates}{A vector of relationship predicates (nodes in g are subjects in the KG), indicating which edges to consider in the neighborhood. If NULL (default), all edges are considered.}

\item{result_categories}{A vector of node categories, indicating which nodes in the larger KG may be fetched. If NULL (default), all nodes in the larger KG are will be fetched.}

\item{transitive}{If TRUE, include transitive closure of the neighborhood. Default is FALSE. Useful in combination with predicates like \code{biolink:subclass_of}.}

\item{drop_unused_query_nodes}{If TRUE, remove query nodes from the result, unless they are at the neighborhood boundary, i.e., required for connecting to the result nodes. Default is FALSE.}
}
\value{
A \code{tbl_kgx()} graph
}
\description{
Given an optional KG engine (e.g. a \code{file_engine()},
\code{neo4j_engine()}, or \code{monarch_engine()}) and a query \code{tbl_kgx()} graph, fetches additional nodes and edges
from the KG, expanding the query graph according to specific criteria. If the first parameter is an engine, that
engine is used; if the first parameter is a query graph, the most recent engine associated with the graph is used.
}
\examples{
e <- monarch_engine()
g <- e \%>\% fetch_nodes(query_ids = "MONDO:0007525")
phenos <- g \%>\%
  fetch_edges(predicates = "biolink:has_phenotype", result_categories = "biolink:PhenotypicFeature")

ancestors <- g \%>\%
 fetch_edges(predicates = "biolink:subclass_of", transitive = TRUE)

}
